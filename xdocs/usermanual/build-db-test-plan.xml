<?xml version="1.0"?>
<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one or more
  ~ contributor license agreements.  See the NOTICE file distributed with
  ~ this work for additional information regarding copyright ownership.
  ~ The ASF licenses this file to you under the Apache License, Version 2.0
  ~ (the "License"); you may not use this file except in compliance with
  ~ the License.  You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!DOCTYPE document[
<!ENTITY sect-num '6'>
]>

<document prev="build-adv-web-test-plan.html" next="build-ftp-test-plan.html" id="$Id$">

<properties>
  <title>User's Manual: Building a Simple Database Test Plan</title>
</properties>

<body>

<section name="&sect-num;. Building a Database Test Plan" anchor="building">
<p>In this section, you will learn how to create a basic
<a href="build-test-plan.html">Test Plan</a> to test a database server.
You will create fifty users that send 2 SQL requests to the database server.
Also, you will tell the users to run their tests 100 times. So, the total number
of requests is (50 users) x (2 requests) x (repeat 100 times) = 10'000 JDBC requests.
To construct the Test Plan, you will use the following elements:
<a href="test_plan.html#thread_group">Thread Group</a>,
<complink name="JDBC Request"/>, <complink name="Summary Report"/>.</p>

<note>This example uses the MySQL database driver.
To use this driver, its containing <code>.jar</code> file (ex. <code>mysql-connector-java-X.X.X-bin.jar</code>) must be copied to the JMeter
<code>./lib</code> directory (see <a href="get-started.html#classpath">JMeter's Classpath</a>
for more details).</note>

</section>

<section name="&sect-num;.1 Adding Users" anchor="adding_users">
<p>The first step you want to do with every JMeter Test Plan is to add a
<a href="test_plan.html#thread_group">Thread Group</a> element. The Thread Group
tells JMeter the number of users you want to simulate, how often the users should
send requests, and how many requests they should send.</p>

<p>Go ahead and add the ThreadGroup element by first selecting the Test Plan,
clicking your right mouse button to get the <code>Add</code> menu, and then select
<menuchoice>
  <guimenuitem>Add</guimenuitem>
  <guimenuitem>ThreadGroup</guimenuitem>
</menuchoice>.</p>

<p>You should now see the Thread Group element under Test Plan. If you do not
see the element, then <em>expand</em> the Test Plan tree by clicking on the
Test Plan element.</p>

<p>Next, you need to modify the default properties. Select the Thread Group element
in the tree, if you have not already selected it. You should now see the Thread
Group Control Panel in the right section of the JMeter window (see Figure &sect-num;.1
below)</p>

<figure image="jdbctest/threadgroup1.png">
Figure &sect-num;.1. Thread Group with Default Values</figure>

<p>Start by providing a more descriptive name for our Thread Group. In the name
field, enter <code>JDBC Users</code>.</p>

<note>You will need a valid database, database table, and user-level access to that
table. In the example shown here, the database is '<code>cloud</code>' and the table name is
'<code>vm_instance</code>'.</note>

<p>Next, increase the number of users to <code>50</code>.</p>

<p>In the next field, the Ramp-Up Period, leave the value of <code>10</code>
seconds.  This property tells JMeter how long to delay between starting each
user. For example, if you enter a Ramp-Up Period of 10 seconds, JMeter will
finish starting all of your users by the end of the 10 seconds.  So, if we have
50 users and a 10 second Ramp-Up Period, then the delay between starting users
would be 200 milliseconds (10 seconds / 50 users = 0.2 second per user).  If you set the
value to 0, then JMeter will immediately start all of your users.</p>

<p>Finally, enter a value of <code>100</code> in
the Loop Count field.  This property tells JMeter how many times to repeat your
test. To have JMeter repeatedly run your Test Plan, select the Forever
checkbox.</p>

<note>In most applications, you have to manually accept
changes you make in a Control Panel.  However, in JMeter, the Control Panel
automatically accepts your changes as you make them.  If you change the
name of an element, the tree will be updated with the new text after you
leave the Control Panel (for example, when selecting another tree element).</note>

<p>See Figure &sect-num;.2 for the completed JDBC Users Thread Group.</p>

<figure image="jdbctest/threadgroup2.png">
Figure &sect-num;.2. JDBC Users Thread Group</figure>

</section>

<section name="&sect-num;.2 Adding JDBC Requests" anchor="adding_requests">
<p>Now that we have defined our users, it is time to define the tasks that they
will be performing.  In this section, you will specify the JDBC requests to
perform.</p>

<p>Begin by selecting the <code>JDBC Users</code> element. Click your right mouse button
to get the <b>Add</b> menu, and then select <menuchoice>
  <guimenuitem>Add</guimenuitem>
  <guimenuitem>Config Element</guimenuitem>
  <guimenuitem>JDBC Connection Configuration</guimenuitem>
</menuchoice>.
Then, select this new element to view its Control Panel (see Figure &sect-num;.3).</p>

<p>Set up the following fields (these assume we will be using a MySQL database called '<code>cloud</code>'):</p>
<ul>
<li>Variable name (here: <code>myDatabase</code>) bound to pool. This needs to uniquely identify the configuration. It is used by the JDBC Sampler to identify the configuration to be used.</li>
<li>Database URL: <code>jdbc:mysql://ipOfTheServer:3306/cloud</code></li>
<li>JDBC Driver class: <code>com.mysql.cj.jdbc.Driver</code></li>
<li>Username: <em>the username of database</em></li>
<li>Password: <em>password for the username</em></li>
</ul>
<p>The other fields on the screen can be left as the defaults.</p>
<p>JMeter creates a database connection pool with the configuration settings as specified in the Control Panel.
The pool is referred to in JDBC Requests in the '<code>Variable Name</code>' field.
Several different JDBC Configuration elements can be used, but they must have unique names.
Every JDBC Request must refer to a JDBC Configuration pool.
More than one JDBC Request can refer to the same pool.
</p>
<figure image="jdbctest/jdbc-config.png">
Figure &sect-num;.3. JDBC Configuration</figure>

<p>Selecting the JDBC Users element again. Click your right mouse button
to get the <b>Add</b> menu, and then select <menuchoice>
  <guimenuitem>Add</guimenuitem>
  <guimenuitem>Sampler</guimenuitem>
  <guimenuitem>JDBC Request</guimenuitem>
</menuchoice>.
Then, select this new element to view its Control Panel (see Figure &sect-num;.4).</p>

<figure image="jdbctest/JDBCRequest.png">
Figure &sect-num;.4. JDBC Request</figure>

<p>In our Test Plan, we will make two JDBC requests. The first one is for
select all 'Running' VM instances, and the second is to select 'Expunging' VM instance (obviously you should
change these to examples appropriate for your particular database). These
are illustrated below.</p>

<note>JMeter sends requests in the order that you add them to the tree.</note>

<p>Start by editing the following properties (see Figure &sect-num;.5):
<ul>
<li>Change the Name to '<code>VM Running</code>'.</li>
<li>Enter the Pool Name: '<code>myDatabase</code>' (same as in the configuration element)</li>
<li>Enter the SQL Query String field.</li>
<li>Enter the Parameter values field with '<code>Running</code>' value.</li>
<li>Enter the Parameter types with '<code>VARCHAR</code>'.</li>
</ul>
</p>

<figure image="jdbctest/JDBCRequest2.png">
Figure &sect-num;.5. JDBC Request for the first SQL request</figure>

<p>Next, add the second JDBC Request and edit the following properties (see
Figure &sect-num;.6):
<ul>
<li>Change the Name to '<code>VM Expunging</code>'.</li>
<li>Change the value of Parameter values to '<code>Expunging</code>'.</li>
</ul>
</p>

<figure image="jdbctest/JDBCRequest3.png">
Figure &sect-num;.6. JDBC Request for the second request</figure>

</section>

<section name="&sect-num;.3 Adding a Listener to View/Store the Test Results" anchor="adding_listener">
<p>The final element you need to add to your Test Plan is a
<a href="component_reference.html#listeners">Listener</a>. This element is
responsible for storing all of the results of your JDBC requests in a file
and presenting the results.</p>

<p>Select the <i>JDBC Users</i> element and add a <complink name="Summary Report"/>
listener (<menuchoice>
    <guimenuitem>Add</guimenuitem>
    <guimenuitem>Listener</guimenuitem>
    <guimenuitem>Summary Report</guimenuitem>
</menuchoice>).</p>

<p>Save the test plan, and run the test with the menu
<menuchoice><guimenuitem>Run</guimenuitem><guimenuitem>Start</guimenuitem></menuchoice> or
<keycombo><keysym>Ctrl</keysym><keysym>R</keysym></keycombo>
</p>

<p>The listener shows the results.</p>

<figure image="jdbctest/jdbc-results.png">
Figure &sect-num;.7. Graph results Listener</figure>

</section>

</body>
</document>
